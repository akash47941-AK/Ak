Project 1
mysql> CREATE TABLE Products (
    ->     product_id INT PRIMARY KEY,
    ->     product_name VARCHAR(100),
    ->     category VARCHAR(50),
    ->     unit_price DECIMAL(10, 2)
    -> );
Query OK, 0 rows affected (0.05 sec)

mysql> INSERT INTO Products (product_id, product_name, category, unit_price) VALUES
    -> (101, 'Laptop', 'Electronics', 500.00),
    -> (102, 'Smartphone', 'Electronics', 300.00),
    -> (103, 'Headphones', 'Electronics', 30.00),
    -> (104, 'Keyboard', 'Electronics', 20.00),
    -> (105, 'Mouse', 'Electronics', 15.00);
Query OK, 5 rows affected (0.03 sec)
Records: 5  Duplicates: 0  Warnings: 0

1.mysql> SELECT * FROM Products;
+------------+--------------+-------------+------------+
| product_id | product_name | category    | unit_price |
+------------+--------------+-------------+------------+
|        101 | Laptop       | Electronics |     500.00 |
|        102 | Smartphone   | Electronics |     300.00 |
|        103 | Headphones   | Electronics |      30.00 |
|        104 | Keyboard     | Electronics |      20.00 |
|        105 | Mouse        | Electronics |      15.00 |
+------------+--------------+-------------+------------+
5 rows in set (0.00 sec)



2.mysql> SELECT product_name, unit_price FROM Products;
+--------------+------------+
| product_name | unit_price |
+--------------+------------+
| Laptop       |     500.00 |
| Smartphone   |     300.00 |
| Headphones   |      30.00 |
| Keyboard     |      20.00 |
| Mouse        |      15.00 |
+--------------+------------+
5 rows in set (0.00 sec)

3.mysql> SELECT * FROM Products WHERE category = 'Electronics';
+------------+--------------+-------------+------------+
| product_id | product_name | category    | unit_price |
+------------+--------------+-------------+------------+
|        101 | Laptop       | Electronics |     500.00 |
|        102 | Smartphone   | Electronics |     300.00 |
|        103 | Headphones   | Electronics |      30.00 |
|        104 | Keyboard     | Electronics |      20.00 |
|        105 | Mouse        | Electronics |      15.00 |
+------------+--------------+-------------+------------+
5 rows in set (0.00 sec)

4.mysql> SELECT product_id, product_name FROM Products WHERE unit_price > 100;
+------------+--------------+
| product_id | product_name |
+------------+--------------+
|        101 | Laptop       |
|        102 | Smartphone   |
+------------+--------------+
2 rows in set (0.00 sec)

5.mysql> SELECT AVG(unit_price) AS AveragePrice FROM Products;
+--------------+
| AveragePrice |
+--------------+
|   173.000000 |
+--------------+
1 row in set (0.02 sec)

6.mysql> SELECT product_name, unit_price FROM Products WHERE unit_price = (SELECT MAX(unit_price) FROM Products);
+--------------+------------+
| product_name | unit_price |
+--------------+------------+
| Laptop       |     500.00 |
+--------------+------------+
1 row in set (0.00 sec)

7.mysql> SELECT product_name, unit_price FROM Products ORDER BY unit_price DESC;
+--------------+------------+
| product_name | unit_price |
+--------------+------------+
| Laptop       |     500.00 |
| Smartphone   |     300.00 |
| Headphones   |      30.00 |
| Keyboard     |      20.00 |
| Mouse        |      15.00 |
+--------------+------------+
5 rows in set (0.01 sec)

8.mysql> SELECT product_name, unit_price FROM Products WHERE unit_price BETWEEN 20 AND 600;
+--------------+------------+
| product_name | unit_price |
+--------------+------------+
| Laptop       |     500.00 |
| Smartphone   |     300.00 |
| Headphones   |      30.00 |
| Keyboard     |      20.00 |
+--------------+------------+
4 rows in set (0.00 sec)

9.mysql> SELECT product_name, category FROM Products ORDER BY category ASC;
+--------------+-------------+
| product_name | category    |
+--------------+-------------+
| Laptop       | Electronics |
| Smartphone   | Electronics |
| Headphones   | Electronics |
| Keyboard     | Electronics |
| Mouse        | Electronics |
+--------------+-------------+
5 rows in set (0.00 sec)

10.mysql> CREATE TABLE Sales (
    -> sale_id INT PRIMARY KEY,
    -> product_id INT,
    -> quantity_sold INT,
    -> sale_date DATE,
    -> total_price DECIMAL(10, 2)
    -> FOREIGN KEY (product_id) REFERENCES Products(product_id)

Project 2

mysql> CREATE TABLE prj (
    ->     sale_id INT PRIMARY KEY,
    ->     product_id INT,
    ->     quantity_sold INT,
    ->     sale_date DATE,
    ->     total_price DECIMAL(10, 2),
    ->     FOREIGN KEY (product_id) REFERENCES Products(product_id)
    -> );
Query OK, 0 rows affected (0.12 sec)

mysql>
mysql> INSERT INTO prj (sale_id, product_id, quantity_sold, sale_date, total_price) VALUES
    -> (1, 101, 5, '2024-01-01', 2500.00),
    -> (2, 102, 3, '2024-01-02', 900.00),
    -> (3, 103, 2, '2024-01-02', 60.00),
    -> (4, 104, 4, '2024-01-03', 80.00),
    -> (5, 105, 6, '2024-01-03', 90.00);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

1.mysql> SELECT * FROM prj;
+---------+------------+---------------+------------+-------------+
| sale_id | product_id | quantity_sold | sale_date  | total_price |
+---------+------------+---------------+------------+-------------+
|       1 |        101 |             5 | 2024-01-01 |     2500.00 |
|       2 |        102 |             3 | 2024-01-02 |      900.00 |
|       3 |        103 |             2 | 2024-01-02 |       60.00 |
|       4 |        104 |             4 | 2024-01-03 |       80.00 |
|       5 |        105 |             6 | 2024-01-03 |       90.00 |
+---------+------------+---------------+------------+-------------+
5 rows in set (0.00 sec)

2.mysql> SELECT sale_id, sale_date FROM prj;
+---------+------------+
| sale_id | sale_date  |
+---------+------------+
|       1 | 2024-01-01 |
|       2 | 2024-01-02 |
|       3 | 2024-01-02 |
|       4 | 2024-01-03 |
|       5 | 2024-01-03 |
+---------+------------+
5 rows in set (0.00 sec)

3.mysql> SELECT * FROM prj WHERE total_price > 100;
+---------+------------+---------------+------------+-------------+
| sale_id | product_id | quantity_sold | sale_date  | total_price |
+---------+------------+---------------+------------+-------------+
|       1 |        101 |             5 | 2024-01-01 |     2500.00 |
|       2 |        102 |             3 | 2024-01-02 |      900.00 |
+---------+------------+---------------+------------+-------------+
2 rows in set (0.00 sec)

4.mysql> SELECT sale_id, total_price FROM prj WHERE sale_date = '2024-01-03';
+---------+-------------+
| sale_id | total_price |
+---------+-------------+
|       4 |       80.00 |
|       5 |       90.00 |
+---------+-------------+
2 rows in set (0.02 sec)

5.mysql> SELECT SUM(total_price) AS total_revenue FROM prj;
+---------------+
| total_revenue |
+---------------+
|       3630.00 |
+---------------+
1 row in set (0.00 sec)

6.mysql> SELECT SUM(total_price) AS total_revenue FROM prj;
+---------------+
| total_revenue |
+---------------+
|       3630.00 |
+---------------+
1 row in set (0.00 sec)

7.mysql> SELECT SUM(quantity_sold) AS total_quantity FROM prj;
+----------------+
| total_quantity |
+----------------+
|             20 |
+----------------+
1 row in set (0.01 sec)

8.mysql> SELECT sale_id, product_id, total_price FROM prj WHERE quantity_sold > 4;
+---------+------------+-------------+
| sale_id | product_id | total_price |
+---------+------------+-------------+
|       1 |        101 |     2500.00 |
|       5 |        105 |       90.00 |
+---------+------------+-------------+
2 rows in set (0.00 sec)

9.mysql> SELECT AVG(total_price) AS average_price FROM prj;
+---------------+
| average_price |
+---------------+
|    726.000000 |
+---------------+
1 row in set (0.00 sec)

Project 3
mysql> create database datab1;
Query OK, 1 row affected (0.01 sec)

mysql> use datab1;
Database changed
mysql> CREATE TABLE Employee (
    -> EmpID INT PRIMARY KEY,
    -> Name VARCHAR(50),
    -> Department VARCHAR(50),
    -> Gender VARCHAR(10),
    -> Salary DECIMAL(10, 2),
    -> Age INT,
    -> Experience INT
    -> );
Query OK, 0 rows affected (0.05 sec)

INSERT INTO Employee (EmpID, Name, Department, Gender, Sala' at line 1
mysql>
mysql> INSERT INTO Employee (EmpID, Name, Department, Gender, Salary, Age, Experience) VALUES
    -> (1, 'Alice', 'HR', 'Female', 50000, 28, 3),
    -> (2, 'Bob', 'Finance', 'Male', 60000, 32, 5),
    -> (3, 'Charlie', 'IT', 'Male', 70000, 30, 6),
    -> (4, 'David', 'HR', 'Male', 48000, 45, 20),
    -> (5, 'Eva', 'IT', 'Female', 72000, 29, 4),
    -> (6, 'Frank', 'Finance', 'Male', 58000, 35, 8),
    -> (7, 'Grace', 'Marketing', 'Female', 50000, 27, 2),
    -> (8, 'Hannah', 'IT', 'Female', 75000, 31, 7),
    -> (9, 'Ivy', 'Finance', 'Female', 62000, 26, 3),
    -> (10, 'Jack', 'Marketing', 'Male', 52000, 38, 10),
    -> (11, 'Kiran', 'IT', 'Male', 68000, 33, 9),
    -> (12, 'Lily', 'HR', 'Female', 55000, 40, 15),
    -> (13, 'Mohan', 'Finance', 'Male', 61000, 29, 4),
    -> (14, 'Nina', 'Marketing', 'Female', 53000, 36, 11),
    -> (15, 'Oscar', 'IT', 'Male', 71000, 34, 10);
Query OK, 15 rows affected (0.08 sec)
Records: 15  Duplicates: 0  Warnings: 0

1.mysql> select * from employee;
+-------+---------+------------+--------+----------+------+------------+
| EmpID | Name    | Department | Gender | Salary   | Age  | Experience |
+-------+---------+------------+--------+----------+------+------------+
|     1 | Alice   | HR         | Female | 50000.00 |   28 |          3 |
|     2 | Bob     | Finance    | Male   | 60000.00 |   32 |          5 |
|     3 | Charlie | IT         | Male   | 70000.00 |   30 |          6 |
|     4 | David   | HR         | Male   | 48000.00 |   45 |         20 |
|     5 | Eva     | IT         | Female | 72000.00 |   29 |          4 |
|     6 | Frank   | Finance    | Male   | 58000.00 |   35 |          8 |
|     7 | Grace   | Marketing  | Female | 50000.00 |   27 |          2 |
|     8 | Hannah  | IT         | Female | 75000.00 |   31 |          7 |
|     9 | Ivy     | Finance    | Female | 62000.00 |   26 |          3 |
|    10 | Jack    | Marketing  | Male   | 52000.00 |   38 |         10 |
|    11 | Kiran   | IT         | Male   | 68000.00 |   33 |          9 |
|    12 | Lily    | HR         | Female | 55000.00 |   40 |         15 |
|    13 | Mohan   | Finance    | Male   | 61000.00 |   29 |          4 |
|    14 | Nina    | Marketing  | Female | 53000.00 |   36 |         11 |
|    15 | Oscar   | IT         | Male   | 71000.00 |   34 |         10 |
+-------+---------+------------+--------+----------+------+------------+
15 rows in set (0.01 sec)

2.mysql> select sum(salary) from employee group by department;
+-------------+
| sum(salary) |
+-------------+
|   153000.00 |
|   241000.00 |
|   356000.00 |
|   155000.00 |
+-------------+
4 rows in set (0.00 sec)

3.mysql> select department,sum(salary) from employee group by department;
+------------+-------------+
| department | sum(salary) |
+------------+-------------+
| HR         |   153000.00 |
| Finance    |   241000.00 |
| IT         |   356000.00 |
| Marketing  |   155000.00 |
+------------+-------------+
4 rows in set (0.00 sec)

4.mysql> select department,sum(salary) from employee group by department having sum(salary)>=200000;
+------------+-------------+
| department | sum(salary) |
+------------+-------------+
| Finance    |   241000.00 |
| IT         |   356000.00 |
+------------+-------------+
2 rows in set (0.01 sec)

5.mysql> select count(name),department from employee group by department;
+-------------+------------+
| count(name) | department |
+-------------+------------+
|           3 | HR         |
|           4 | Finance    |
|           5 | IT         |
|           3 | Marketing  |
+-------------+------------+
4 rows in set (0.01 sec)

6.mysql>  select count(name),department from employee group by department having count(name)>=3;
+-------------+------------+
| count(name) | department |
+-------------+------------+
|           3 | HR         |
|           4 | Finance    |
|           5 | IT         |
|           3 | Marketing  |
+-------------+------------+
4 rows in set (0.01 sec)

7.mysql> select count(name),department from employee group by department having count(name)>=3;
+-------------+------------+
| count(name) | department |
+-------------+------------+
|           3 | HR         |
|           4 | Finance    |
|           5 | IT         |
|           3 | Marketing  |
+-------------+------------+
4 rows in set (0.00 sec)

8.mysql> select count(name),department from employee group by department having count(name)>3;
+-------------+------------+
| count(name) | department |
+-------------+------------+
|           4 | Finance    |
|           5 | IT         |
+-------------+------------+
2 rows in set (0.00 sec)

9.mysql> select avg(salary),gender from employee group by gender;
+--------------+--------+
| avg(salary)  | gender |
+--------------+--------+
| 59571.428571 | Female |
| 61000.000000 | Male   |
+--------------+--------+
2 rows in set (0.00 sec)

10.mysql> select count(name),gender from employee group by gender having count(name)>5;
+-------------+--------+
| count(name) | gender |
+-------------+--------+
|           7 | Female |
|           8 | Male   |
+-------------+--------+
2 rows in set (0.00 sec)

11.mysql> select avg(salary),department from employee group by department having avg(salary)>60000;
+--------------+------------+
| avg(salary)  | department |
+--------------+------------+
| 60250.000000 | Finance    |
| 71200.000000 | IT         |
+--------------+------------+
2 rows in set (0.00 sec)

12.mysql> select count(name),gender,department from employee group by gender,department;
+-------------+--------+------------+
| count(name) | gender | department |
+-------------+--------+------------+
|           2 | Female | HR         |
|           3 | Male   | Finance    |
|           3 | Male   | IT         |
|           1 | Male   | HR         |
|           2 | Female | IT         |
|           2 | Female | Marketing  |
|           1 | Female | Finance    |
|           1 | Male   | Marketing  |
+-------------+--------+------------+
8 rows in set (0.00 sec)

13.mysql> select avg(Experience),department from employee group by department having avg(Experience)>7;
+-----------------+------------+
| avg(Experience) | department |
+-----------------+------------+
|         12.6667 | HR         |
|          7.2000 | IT         |
|          7.6667 | Marketing  |
+-----------------+------------+
3 rows in set (0.00 sec)

14.mysql> select sum(salary),department from employee group by department having sum(salary)>70000;
+-------------+------------+
| sum(salary) | department |
+-------------+------------+
|   153000.00 | HR         |
|   241000.00 | Finance    |
|   356000.00 | IT         |
|   155000.00 | Marketing  |
+-------------+------------+
4 rows in set (0.00 sec)

15.mysql> select avg(age),department from employee group by department;
+----------+------------+
| avg(age) | department |
+----------+------------+
|  37.6667 | HR         |
|  30.5000 | Finance    |
|  31.4000 | IT         |
|  33.6667 | Marketing  |
+----------+------------+
4 rows in set (0.00 sec)

16.mysql> select avg(salary),department,gender from employee group by department,gender;
+--------------+------------+--------+
| avg(salary)  | department | gender |
+--------------+------------+--------+
| 52500.000000 | HR         | Female |
| 59666.666667 | Finance    | Male   |
| 69666.666667 | IT         | Male   |
| 48000.000000 | HR         | Male   |
| 73500.000000 | IT         | Female |
| 51500.000000 | Marketing  | Female |
| 62000.000000 | Finance    | Female |
| 52000.000000 | Marketing  | Male   |
+--------------+------------+--------+
8 rows in set (0.00 sec)

17.mysql> select avg(salary),department,gender from employee group by department,gender having avg(salary)>60000;
+--------------+------------+--------+
| avg(salary)  | department | gender |
+--------------+------------+--------+
| 69666.666667 | IT         | Male   |
| 73500.000000 | IT         | Female |
| 62000.000000 | Finance    | Female |
+--------------+------------+--------+
3 rows in set (0.02 sec)

18.mysql> select sum(experience),department from employee group by department having sum(experience)>20;
+-----------------+------------+
| sum(experience) | department |
+-----------------+------------+
|              38 | HR         |
|              36 | IT         |
|              23 | Marketing  |
+-----------------+------------+
3 rows in set (0.00 sec)

19.mysql> select avg(experience),department,gender from employee group by department,gender;
+-----------------+------------+--------+
| avg(experience) | department | gender |
+-----------------+------------+--------+
|          9.0000 | HR         | Female |
|          5.6667 | Finance    | Male   |
|          8.3333 | IT         | Male   |
|         20.0000 | HR         | Male   |
|          5.5000 | IT         | Female |
|          6.5000 | Marketing  | Female |
|          3.0000 | Finance    | Female |
|         10.0000 | Marketing  | Male   |
+-----------------+------------+--------+
8 rows in set (0.00 sec)

20.mysql> select avg(age),department from employee group by department having avg(age)<30;
Empty set (0.00 sec)

21.mysql> select avg(age),department from employee group by department having avg(age)>30;
+----------+------------+
| avg(age) | department |
+----------+------------+
|  37.6667 | HR         |
|  30.5000 | Finance    |
|  31.4000 | IT         |
|  33.6667 | Marketing  |
+----------+------------+
4 rows in set (0.00 sec)


22.mysql> select department,gender from employee group by department,gender;
+------------+--------+
| department | gender |
+------------+--------+
| HR         | Female |
| Finance    | Male   |
| IT         | Male   |
| HR         | Male   |
| IT         | Female |
| Marketing  | Female |
| Finance    | Female |
| Marketing  | Male   |
+------------+--------+
8 rows in set (0.01 sec)

23.mysql> select count(gender),department from employee group by department having count(gender)>1;
+---------------+------------+
| count(gender) | department |
+---------------+------------+
|             3 | HR         |
|             4 | Finance    |
|             5 | IT         |
|             3 | Marketing  |
+---------------+------------+
4 rows in set (0.00 sec)

24.mysql> select department ,count(department) from employee where gender='female' group by department having count(department)>1;
+------------+-------------------+
| department | count(department) |
+------------+-------------------+
| HR         |                 2 |
| IT         |                 2 |
| Marketing  |                 2 |
+------------+-------------------+
3 rows in set (0.01 sec)
25.mysql> select department ,count(department) from employee where gender='female' group by department having count(department)>1;
+------------+-------------------+
| department | count(department) |
+------------+-------------------+
| HR         |                 2 |
| IT         |                 2 |
| Marketing  |                 2 |
+------------+-------------------+
3 rows in set (0.01 sec)



26.mysql> select count(department),gender from employee group by department,gender;
+-------------------+--------+
| count(department) | gender |
+-------------------+--------+
|                 2 | Female |
|                 3 | Male   |
|                 3 | Male   |
|                 1 | Male   |
|                 2 | Female |
|                 2 | Female |
|                 1 | Female |
|                 1 | Male   |
+-------------------+--------+
8 rows in set (0.00 sec)

27.mysql> select count(department),department,gender from employee group by department,gender;
+-------------------+------------+--------+
| count(department) | department | gender |
+-------------------+------------+--------+
|                 2 | HR         | Female |
|                 3 | Finance    | Male   |
|                 3 | IT         | Male   |
|                 1 | HR         | Male   |
|                 2 | IT         | Female |
|                 2 | Marketing  | Female |
|                 1 | Finance    | Female |
|                 1 | Marketing  | Male   |
+-------------------+------------+--------+
8 rows in set (0.02 sec)

28.mysql> SELECT Department
    -> FROM Employee
    -> GROUP BY Department
    -> HAVING COUNT(DISTINCT Gender) > 1;
+------------+
| Department |
+------------+
| Finance    |
| HR         |
| IT         |
| Marketing  |
+------------+
4 rows in set (0.02 sec)

29.mysql> SELECT Department FROM Employee GROUP BY Department HAVING COUNT(DISTINCT Gender) > 1;
+------------+
| Department |
+------------+
| Finance    |
| HR         |
| IT         |
| Marketing  |
+------------+
4 rows in set (0.00 sec)

30.mysql> SELECT Department, AVG(Experience) AS AvgExp FROM Employee GROUP BY Department ORDER BY AvgExp DESC LIMIT 1;
+------------+---------+
| Department | AvgExp  |
+------------+---------+
| HR         | 12.6667 |
+------------+---------+
1 row in set (0.02 sec)

31.mysql> SELECT Department, Gender, SUM(Salary) AS TotalSalary FROM Employee GROUP BY Department, Gender HAVING SUM(Salary) > 100000;
+------------+--------+-------------+
| Department | Gender | TotalSalary |
+------------+--------+-------------+
| HR         | Female |   105000.00 |
| Finance    | Male   |   179000.00 |
| IT         | Male   |   209000.00 |
| IT         | Female |   147000.00 |
| Marketing  | Female |   103000.00 |
+------------+--------+-------------+
5 rows in set (0.02 sec)

32.mysql> SELECT Department, COUNT(*) AS Under35Count FROM Employee WHERE Age < 35 GROUP BY Department;
+------------+--------------+
| Department | Under35Count |
+------------+--------------+
| HR         |            1 |
| Finance    |            3 |
| IT         |            5 |
| Marketing  |            1 |
+------------+--------------+
4 rows in set (0.02 sec)

33.mysql> SELECT Department, SUM(Salary) AS TotalSalary FROM Employee GROUP BY Department ORDER BY TotalSalary DESC LIMIT 3;
+------------+-------------+
| Department | TotalSalary |
+------------+-------------+
| IT         |   356000.00 |
| Finance    |   241000.00 |
| Marketing  |   155000.00 |
+------------+-------------+
3 rows in set (0.00 sec)

34.mysql> SELECT Department FROM Employee GROUP BY Department HAVING MIN(Experience) > 5;
Empty set (0.02 sec)

35.mysql> SELECT DISTINCT Department FROM Employee WHERE Salary < 55000;
+------------+
| Department |
+------------+
| HR         |
| Marketing  |
+------------+
2 rows in set (0.00 sec)












Project 4
mysql> CREATE TABLE Sales (
    -> SaleID INT PRIMARY KEY,
    -> Salesperson VARCHAR(50),
    -> Region VARCHAR(50),
    -> Product VARCHAR(50),
    -> Quantity INT,
    -> SaleAmount DECIMAL(10,2)
    -> );
Query OK, 0 rows affected (0.20 sec)

mysql> INSERT INTO Sales (SaleID, Salesperson, Region, Product, Quantity, SaleAmount) VALUES
    -> (1, 'Alice', 'North', 'Laptop', 1, 1000.00),
    -> (2, 'Bob', 'South', 'Mouse', 3, 75.00),
    -> (3, 'Alice', 'North', 'Monitor', 2, 300.00),
    -> (4, 'Charlie', 'East', 'Keyboard', 1, 50.00),
    -> (5, 'Bob', 'South', 'Monitor', 1, 150.00),
    -> (6, 'Alice', 'North', 'Mouse', 2, 50.00),
    -> (7, 'Charlie', 'East', 'Laptop', 2, 2000.00),
    -> (8, 'David', 'West', 'Laptop', 1, 1100.00),
    -> (9, 'David', 'West', 'Mouse', 4, 100.00),
    -> (10, 'Eve', 'South', 'Monitor', 3, 450.00),
    -> (11, 'Eve', 'South', 'Keyboard', 2, 100.00),
    -> (12, 'Eve', 'South', 'Mouse', 1, 25.00),
    -> (13, 'Alice', 'North', 'Keyboard', 1, 60.00),
    -> (14, 'Bob', 'South', 'Laptop', 1, 1200.00),
    -> (15, 'Charlie', 'East', 'Mouse', 2, 50.00);
Query OK, 15 rows affected (0.03 sec)
Records: 15  Duplicates: 0  Warnings: 0


1.mysql> SELECT Salesperson, SUM(Quantity)  FROM Sales GROUP BY Salesperson;
+-------------+---------------+
| Salesperson | SUM(Quantity) |
+-------------+---------------+
| Alice       |             6 |
| Bob         |             5 |
| Charlie     |             5 |
| David       |             5 |
| Eve         |             6 |
+-------------+---------------+
5 rows in set (0.00 sec)

2.mysql> SELECT Salesperson FROM Sales GROUP BY Salesperson HAVING SUM(Quantity) > 5;
+-------------+
| Salesperson |
+-------------+
| Alice       |
| Eve         |
+-------------+
2 rows in set (0.00 sec)

3.mysql> SELECT Salesperson, COUNT(*) AS ProductCount FROM Sales GROUP BY Salesperson;
+-------------+--------------+
| Salesperson | ProductCount |
+-------------+--------------+
| Alice       |            4 |
| Bob         |            3 |
| Charlie     |            3 |
| David       |            2 |
| Eve         |            3 |
+-------------+--------------+
5 rows in set (0.00 sec)

4.mysql> SELECT Region FROM Sales GROUP BY Region HAVING SUM(SaleAmount) > 1000;
+--------+
| Region |
+--------+
| North  |
| South  |
| East   |
| West   |
+--------+
4 rows in set (0.00 sec)

5.mysql> SELECT Salesperson FROM Sales GROUP BY Salesperson HAVING COUNT(*) > 2;
+-------------+
| Salesperson |
+-------------+
| Alice       |
| Bob         |
| Charlie     |
| Eve         |
+-------------+
4 rows in set (0.00 sec)

6.mysql> SELECT Product, SUM(SaleAmount) AS TotalSales FROM Sales GROUP BY Product HAVING SUM(SaleAmount) > 500;
+---------+------------+
| Product | TotalSales |
+---------+------------+
| Laptop  |    5300.00 |
| Monitor |     900.00 |
+---------+------------+
2 rows in set (0.00 sec)

7.mysql> SELECT Region, Product, SUM(Quantity) AS TotalQty FROM Sales GROUP BY Region, Product;
+--------+----------+----------+
| Region | Product  | TotalQty |
+--------+----------+----------+
| North  | Laptop   |        1 |
| South  | Mouse    |        4 |
| North  | Monitor  |        2 |
| East   | Keyboard |        1 |
| South  | Monitor  |        4 |
| North  | Mouse    |        2 |
| East   | Laptop   |        2 |
| West   | Laptop   |        1 |
| West   | Mouse    |        4 |
| South  | Keyboard |        2 |
| North  | Keyboard |        1 |
| South  | Laptop   |        1 |
| East   | Mouse    |        2 |
+--------+----------+----------+
13 rows in set (0.00 sec)

8.mysql> SELECT Salesperson FROM Sales GROUP BY Salesperson HAVING COUNT(DISTINCT Product) > 1;
+-------------+
| Salesperson |
+-------------+
| Alice       |
| Bob         |
| Charlie     |
| David       |
| Eve         |
+-------------+
5 rows in set (0.00 sec)

9.mysql> SELECT Region, Product, AVG(Quantity) AS AvgQty FROM Sales GROUP BY Region, Product HAVING AVG(Quantity) > 1;
+--------+----------+--------+
| Region | Product  | AvgQty |
+--------+----------+--------+
| South  | Mouse    | 2.0000 |
| North  | Monitor  | 2.0000 |
| South  | Monitor  | 2.0000 |
| North  | Mouse    | 2.0000 |
| East   | Laptop   | 2.0000 |
| West   | Mouse    | 4.0000 |
| South  | Keyboard | 2.0000 |
| East   | Mouse    | 2.0000 |
+--------+----------+--------+
8 rows in set (0.00 sec)

10.mysql> SELECT Salesperson FROM Sales GROUP BY Salesperson HAVING SUM(SaleAmount) BETWEEN 500 AND 1500;
+-------------+
| Salesperson |
+-------------+
| Alice       |
| Bob         |
| David       |
| Eve         |
+-------------+
4 rows in set (0.02 sec)

11.mysql> SELECT Product FROM Sales GROUP BY Product HAVING SUM(Quantity) > 3;
+----------+
| Product  |
+----------+
| Laptop   |
| Mouse    |
| Monitor  |
| Keyboard |
+----------+
4 rows in set (0.00 sec)

12.mysql> SELECT DISTINCT Salesperson FROM Sales WHERE Product = 'Laptop';
+-------------+
| Salesperson |
+-------------+
| Alice       |
| Charlie     |
| David       |
| Bob         |
+-------------+
4 rows in set (0.00 sec)

13.mysql> SELECT Salesperson, Region, SUM(SaleAmount) AS TotalSales FROM Sales GROUP BY Salesperson, Region HAVING SUM(SaleAmount) > 500;
+-------------+--------+------------+
| Salesperson | Region | TotalSales |
+-------------+--------+------------+
| Alice       | North  |    1410.00 |
| Bob         | South  |    1425.00 |
| Charlie     | East   |    2100.00 |
| David       | West   |    1200.00 |
| Eve         | South  |     575.00 |
+-------------+--------+------------+
5 rows in set (0.00 sec)

14.mysql> SELECT Salesperson, Region FROM Sales GROUP BY Salesperson, Region HAVING COUNT(DISTINCT Product) >= 2;
+-------------+--------+
| Salesperson | Region |
+-------------+--------+
| Alice       | North  |
| Bob         | South  |
| Charlie     | East   |
| David       | West   |
| Eve         | South  |
+-------------+--------+
5 rows in set (0.00 sec)

15.mysql> SELECT Product FROM Sales GROUP BY Product HAVING COUNT(DISTINCT Region) > 1;
+----------+
| Product  |
+----------+
| Keyboard |
| Laptop   |
| Monitor  |
| Mouse    |
+----------+
4 rows in set (0.00 sec)



16.mysql> SELECT Product, COUNT(*) AS SaleCount FROM Sales GROUP BY Product HAVING COUNT(*) >= 2;
+----------+-----------+
| Product  | SaleCount |
+----------+-----------+
| Laptop   |         4 |
| Mouse    |         5 |
| Monitor  |         3 |
| Keyboard |         3 |
+----------+-----------+
4 rows in set (0.00 sec)

17.mysql> SELECT Region, Salesperson, SUM(Quantity) AS TotalQty FROM Sales GROUP BY Region, Salesperson;
+--------+-------------+----------+
| Region | Salesperson | TotalQty |
+--------+-------------+----------+
| North  | Alice       |        6 |
| South  | Bob         |        5 |
| East   | Charlie     |        5 |
| West   | David       |        5 |
| South  | Eve         |        6 |
+--------+-------------+----------+
5 rows in set (0.00 sec)

18.mysql> SELECT Salesperson FROM Sales GROUP BY Salesperson HAVING COUNT(*) > 3 AND SUM(SaleAmount) > 1000;
+-------------+
| Salesperson |
+-------------+
| Alice       |
+-------------+
1 row in set (0.01 sec)

19.mysql> SELECT Region, AVG(SaleAmount) AS AvgSales FROM Sales GROUP BY Region HAVING AVG(SaleAmount) > 200;
+--------+------------+
| Region | AvgSales   |
+--------+------------+
| North  | 352.500000 |
| South  | 333.333333 |
| East   | 700.000000 |
| West   | 600.000000 |
+--------+------------+
4 rows in set (0.00 sec)

20.mysql> SELECT Region, Product FROM Sales GROUP BY Region, Product HAVING SUM(Quantity) > 3;
+--------+---------+
| Region | Product |
+--------+---------+
| South  | Mouse   |
| South  | Monitor |
| West   | Mouse   |
+--------+---------+
3 rows in set (0.00 sec)
